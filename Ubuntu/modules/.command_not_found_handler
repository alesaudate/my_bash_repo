#!/bin/bash

# From https://stackoverflow.com/a/64285457

PROMPT_COMMAND=current_shell_cd
CD_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/bash-cd/$$.cd"

current_shell_cd() {
    if [ -r "$CD_FILE" ]; then
        local CD_TARGET="$( cat "$CD_FILE" )"
        [ ! -z "$CD_TARGET" ] && cd "$CD_TARGET" 2>/dev/null
        rm "$CD_FILE"
    fi
}

command_not_found_handle () { 
    local COMMAND="$1";
    # List folders which are going to be checked
    local BASE_FOLDER_LIST=(
        "$WORKSPACE"
    )  # If desired, add other folders here, one at a line
    local FOLDER=$(
        find "${BASE_FOLDER_LIST[@]}" \
             -maxdepth 2 -type d \
             -iname "$COMMAND" -print -quit )
    if [ ! -z "$FOLDER" -a -d "$FOLDER" ]
    then
        mkdir -p "$( dirname "$CD_FILE" )"
        echo "$FOLDER" > "$CD_FILE"
    else
	if [ -z "$BRANCH_PREFIX" ]
       	then
        	printf "%s: command not found\n" "$1" 1>&2
	        return 127
	elif [[ $COMMAND = $BRANCH_PREFIX* ]]
       	then
		printf "Searching for branches beginning with $COMMAND \n"
		FOUND_BRANCHES=$(git branch -a | grep $COMMAND | grep -v remotes/)
		arr=(`echo $FOUND_BRANCHES`)
		if [ ${#arr[@]} -gt 1 ]; then
			echo "Several branches have been found for this search, switching is not possible"
			return 127
		elif [ ${#arr[@]} -eq 0 ]; then
			echo "No branch has been found prefixed by $COMMAND"
			return 127
		else		     	
			git checkout ${arr[0]}
			return 0
		fi
        else
		printf "%s: command not found\n" "$1" 1>&2
		return 127
	fi
    fi
}
